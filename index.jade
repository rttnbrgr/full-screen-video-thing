doctype html
html(lang="en")

  head
    meta(charset="utf-8")
    title Full Screen Video BG
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(href="assets/css/wavy.css" rel="stylesheet" type="text/css")
    <!--[if lt IE 9]>
    script(type="text/javascript").
      document.createElement('video');
    <![endif]-->

  body
    
    include includes/heroWrapper.jade
    include includes/videoCurtain.jade  

script(type="text/javascript").
  var vid, videoBtn, playString, pauseString;
  vid = document.getElementById("videoBackground");
  videoBtn = document.getElementById("videoButton");
  playString = "&#9658";
  pauseString = "&#9612;&#9612";
  
  videoBtn.addEventListener("click", function() {
    if (vid.paused) {      
      vid.play();
      this.innerHTML = pauseString;
    } else {
      vid.pause();
      this.innerHTML = playString;
    }
  });

  var curtain, target, videoIframe, youtubeBtn, isVisible;
  curtain = document.getElementsByClassName('youtubeCurtain')[0];
  youtubeBtn = document.getElementsByClassName('testButtonHook')[0];
  curtainClose = document.getElementsByClassName('youtubeClose')[0];
  curtainOpen = document.getElementById("curtainOpen");
  
  // for animation.css
  var animationEntrance = "isVisible bounceInDown";
  var animationExit = "bounceOutTop";

  function toggleVideoCurtain() {
    var isVisible = curtain.classList.contains('isVisible');      
    isVisible ? curtain.classList.remove('isVisible') : curtain.classList.add('isVisible');
  }

  youtubeBtn.addEventListener('click', function(e) {
    console.log('youtube trigger');
    toggleVideoCurtain();
  });

  curtainClose.addEventListener('click', function(e) {
    console.log('youtube close');
    toggleVideoCurtain();
  });

  // 2. This code loads the IFrame Player API code asynchronously.
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    console.log('onYouTubeIframeAPIReady fired')
    player = new YT.Player('ytPlayer', {
      height: '390',
      width: '640',
      videoId: 'ITZNHsad2fE',
      playerVars: {
        controls: 0,
        showinfo: 0,
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    //- event.target.playVideo();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  var done = false;
  
  function onPlayerStateChange(event) {
    if (event.data == YT.PlayerState.PLAYING && !done) {
      setTimeout(stopVideo, 6000);
      done = true;
    }
  }
  
  function stopVideo() {
    player.stopVideo();
  }  

  console.log(player);
